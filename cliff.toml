# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            [**`{{ commit.id | truncate(length=8, end="") }}`**]({{ "https://github.com/epilys/rlr/commit/" ~ commit.id }}) `{{ commit.message | split(pat="\n")| first | upper_first }}`\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
# postprocessors = [
#   # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
# ]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  { pattern = '.*', replace_command = 'typos --write-changes -' },
  { pattern = "\\b\\n\\b", replace = ' ' },
  { pattern = "\\s*Signed-off-by:[^>]+>\\s*", replace = "" },
{ pattern = "`[^`]+`", replace_command = "pandoc -f commonmark -t plain" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^chore\\(changelog\\)", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^CHANGELOG", skip = true },
  { message = "(?i)^revert", group = "<!-- 11 -->Reverted Commits" },
  { message = "^.github", group = "<!-- 10 -->Continuous Integration" },
  { message = "^.gitea", group = "<!-- 10 -->Continuous Integration" },
  { message = "(?i)^ci", group = "<!-- 10 -->Continuous Integration" },
  { message = "^build", group = "<!-- 09 -->Build" },
  { body = ".*security", group = "<!-- 08 -->Security" },
  { message = "^scripts", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = '(?i)^chore', group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^debian", group = "<!-- 06 -->Packaging" },
  { message = "^test", group = "<!-- 06 -->Testing" },
  { message = "^style", group = "<!-- 05 -->Styling" },
  { message = "^perf", group = "<!-- 04 -->Performance" },
  { message = "(?i)readme", group = "<!-- 03 -->Documentation" },
  { message = "(?i)anpage", group = "<!-- 03 -->Documentation" },
  { message = "(?i)anual", group = "<!-- 03 -->Documentation" },
  { message = "meli.[17]", group = "<!-- 03 -->Documentation" },
  { message = "meli.conf.5", group = "<!-- 03 -->Documentation" },
  { message = "meli-themes.5", group = "<!-- 03 -->Documentation" },
  { message = "README.md", group = "<!-- 03 -->Documentation" },
  { message = "BUILD.md", group = "<!-- 03 -->Documentation" },
  { message = "DEVELOPMENT.md", group = "<!-- 03 -->Documentation" },
  { message = "^doc", group = "<!-- 03 -->Documentation" },
  { message = "^[^.]*.rs:", group = "<!-- 02 -->Refactoring" },
  { message = '(?i)^refactor\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)lints?\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)move\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)replace\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)remove\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)refactor\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)rename\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)formatting\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)cleanups?\b', group = "<!-- 02 -->Refactoring" },
  { message = '(?i)fix\b', group = "<!-- 01 -->Bug Fixes" },
  { message = '(?i)fixups?\b', group = "<!-- 01 -->Bug Fixes" },
  { message = "(?i)implement", group = "<!-- 00 -->Added" },
  { message = '(?i)add\b', group = "<!-- 00 -->Added" },
  { message = '(?i)^update\b', group = "<!-- 02 -->Changes" },
  { message = '(?i)\bdependency\b', group = "<!-- 02 -->Changes" },
  { message = "^feat", group = "<!-- 00 -->Added" },
  { message = '(?i)retry\b', group = "<!-- 02 -->Changes" },
  { message = "^conf", group = "<!-- 02 -->Changes" },
  { message = "^contacts?", group = "<!-- 02 -->Changes" },
  { message = "^compos[ie]?", group = "<!-- 02 -->Changes" },
  { message = "^types", group = "<!-- 02 -->Changes" },
  { message = '(?i)^use', group = "<!-- 02 -->Changes" },
  { message = "^terminal", group = "<!-- 02 -->Changes" },
  { message = "^listing", group = "<!-- 02 -->Changes" },
  { message = "^mail", group = "<!-- 02 -->Changes" },
  { message = "^utilities", group = "<!-- 02 -->Changes" },
  { message = "^view", group = "<!-- 02 -->Changes" },
  { message = "^mail/view", group = "<!-- 02 -->Changes" },
  { message = "^backends?", group = "<!-- 02 -->Changes" },
  { message = "^commands?", group = "<!-- 02 -->Changes" },
  { message = "^actions?", group = "<!-- 02 -->Changes" },
  { message = "^log", group = "<!-- 02 -->Changes" },
  { message = "^pgp", group = "<!-- 02 -->Changes" },
  { message = "^gpgme", group = "<!-- 02 -->Changes" },
  { message = "^manage", group = "<!-- 02 -->Changes" },
  { message = "^smtp", group = "<!-- 02 -->Changes" },
  { message = "^mbox", group = "<!-- 02 -->Changes" },
  { message = "^jmap", group = "<!-- 02 -->Changes" },
  { message = "^imap", group = "<!-- 02 -->Changes" },
  { message = "^nntp", group = "<!-- 02 -->Changes" },
  { message = "^notmuch", group = "<!-- 02 -->Changes" },
  { message = "^melib", group = "<!-- 02 -->Changes" },
  { message = "^meli", group = "<!-- 02 -->Changes" },
  { message = "^accounts", group = "<!-- 02 -->Changes" },
  { message = "^embedded", group = "<!-- 02 -->Changes" },
  { message = "^jobs", group = "<!-- 02 -->Changes" },
  { message = ".*", group = "<!-- 07 -->Miscellaneous Tasks" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]+|alpha-[0-9]+"
# regex for ignoring tags
ignore_tags = "v[^-]+-rc[.]?[0-9]+"
# regex for skipping tags
#skip_tags = "alpha"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
